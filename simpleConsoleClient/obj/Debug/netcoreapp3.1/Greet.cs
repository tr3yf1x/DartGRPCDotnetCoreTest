// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/greet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace dartServer {

  /// <summary>Holder for reflection information generated from Protos/greet.proto</summary>
  public static partial class GreetReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/greet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GreetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b3MvZ3JlZXQucHJvdG8SBWdyZWV0IhwKDEhlbGxvUmVxdWVzdBIM",
            "CgRuYW1lGAEgASgJIh0KCkhlbGxvUmVwbHkSDwoHbWVzc2FnZRgBIAEoCSIu",
            "CgxUaHJvd1JlcXVlc3QSDgoGWENvb3JkGAEgASgBEg4KBllDb29yZBgCIAEo",
            "ASKkAQoKVGhyb3dSZXBseRIOCgZYQ29vcmQYASABKAESDgoGWUNvb3JkGAIg",
            "ASgBEhgKEERpc3RhbmNlVG9DZW50ZXIYAyABKAESEwoLSGl0VGhlQm9hcmQY",
            "BCABKAgSFQoNTXVsdGlwbGljYXRvchgFIAEoBRINCgVBbmdsZRgGIAEoARIR",
            "CglQb2ludFNsb3QYByABKAUSDgoGUG9pbnRzGAggASgFMncKB0dyZWV0ZXIS",
            "MgoIU2F5SGVsbG8SEy5ncmVldC5IZWxsb1JlcXVlc3QaES5ncmVldC5IZWxs",
            "b1JlcGx5EjgKDkdldFRocm93UmVzdWx0EhMuZ3JlZXQuVGhyb3dSZXF1ZXN0",
            "GhEuZ3JlZXQuVGhyb3dSZXBseUINqgIKZGFydFNlcnZlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::dartServer.HelloRequest), global::dartServer.HelloRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dartServer.HelloReply), global::dartServer.HelloReply.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dartServer.ThrowRequest), global::dartServer.ThrowRequest.Parser, new[]{ "XCoord", "YCoord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::dartServer.ThrowReply), global::dartServer.ThrowReply.Parser, new[]{ "XCoord", "YCoord", "DistanceToCenter", "HitTheBoard", "Multiplicator", "Angle", "PointSlot", "Points" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The request message containing the user's name.
  /// </summary>
  public sealed partial class HelloRequest : pb::IMessage<HelloRequest> {
    private static readonly pb::MessageParser<HelloRequest> _parser = new pb::MessageParser<HelloRequest>(() => new HelloRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dartServer.GreetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloRequest(HelloRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloRequest Clone() {
      return new HelloRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the greetings.
  /// </summary>
  public sealed partial class HelloReply : pb::IMessage<HelloReply> {
    private static readonly pb::MessageParser<HelloReply> _parser = new pb::MessageParser<HelloReply>(() => new HelloReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dartServer.GreetReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloReply(HelloReply other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloReply Clone() {
      return new HelloReply(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloReply other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request message with coordinates (sanatized)
  /// </summary>
  public sealed partial class ThrowRequest : pb::IMessage<ThrowRequest> {
    private static readonly pb::MessageParser<ThrowRequest> _parser = new pb::MessageParser<ThrowRequest>(() => new ThrowRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dartServer.GreetReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowRequest(ThrowRequest other) : this() {
      xCoord_ = other.xCoord_;
      yCoord_ = other.yCoord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowRequest Clone() {
      return new ThrowRequest(this);
    }

    /// <summary>Field number for the "XCoord" field.</summary>
    public const int XCoordFieldNumber = 1;
    private double xCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XCoord {
      get { return xCoord_; }
      set {
        xCoord_ = value;
      }
    }

    /// <summary>Field number for the "YCoord" field.</summary>
    public const int YCoordFieldNumber = 2;
    private double yCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YCoord {
      get { return yCoord_; }
      set {
        yCoord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XCoord, other.XCoord)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YCoord, other.YCoord)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XCoord != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XCoord);
      if (YCoord != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YCoord);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XCoord != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(XCoord);
      }
      if (YCoord != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(YCoord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XCoord != 0D) {
        size += 1 + 8;
      }
      if (YCoord != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrowRequest other) {
      if (other == null) {
        return;
      }
      if (other.XCoord != 0D) {
        XCoord = other.XCoord;
      }
      if (other.YCoord != 0D) {
        YCoord = other.YCoord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            XCoord = input.ReadDouble();
            break;
          }
          case 17: {
            YCoord = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThrowReply : pb::IMessage<ThrowReply> {
    private static readonly pb::MessageParser<ThrowReply> _parser = new pb::MessageParser<ThrowReply>(() => new ThrowReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrowReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::dartServer.GreetReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowReply(ThrowReply other) : this() {
      xCoord_ = other.xCoord_;
      yCoord_ = other.yCoord_;
      distanceToCenter_ = other.distanceToCenter_;
      hitTheBoard_ = other.hitTheBoard_;
      multiplicator_ = other.multiplicator_;
      angle_ = other.angle_;
      pointSlot_ = other.pointSlot_;
      points_ = other.points_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowReply Clone() {
      return new ThrowReply(this);
    }

    /// <summary>Field number for the "XCoord" field.</summary>
    public const int XCoordFieldNumber = 1;
    private double xCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double XCoord {
      get { return xCoord_; }
      set {
        xCoord_ = value;
      }
    }

    /// <summary>Field number for the "YCoord" field.</summary>
    public const int YCoordFieldNumber = 2;
    private double yCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YCoord {
      get { return yCoord_; }
      set {
        yCoord_ = value;
      }
    }

    /// <summary>Field number for the "DistanceToCenter" field.</summary>
    public const int DistanceToCenterFieldNumber = 3;
    private double distanceToCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DistanceToCenter {
      get { return distanceToCenter_; }
      set {
        distanceToCenter_ = value;
      }
    }

    /// <summary>Field number for the "HitTheBoard" field.</summary>
    public const int HitTheBoardFieldNumber = 4;
    private bool hitTheBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitTheBoard {
      get { return hitTheBoard_; }
      set {
        hitTheBoard_ = value;
      }
    }

    /// <summary>Field number for the "Multiplicator" field.</summary>
    public const int MultiplicatorFieldNumber = 5;
    private int multiplicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiplicator {
      get { return multiplicator_; }
      set {
        multiplicator_ = value;
      }
    }

    /// <summary>Field number for the "Angle" field.</summary>
    public const int AngleFieldNumber = 6;
    private double angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "PointSlot" field.</summary>
    public const int PointSlotFieldNumber = 7;
    private int pointSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointSlot {
      get { return pointSlot_; }
      set {
        pointSlot_ = value;
      }
    }

    /// <summary>Field number for the "Points" field.</summary>
    public const int PointsFieldNumber = 8;
    private int points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrowReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrowReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XCoord, other.XCoord)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YCoord, other.YCoord)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DistanceToCenter, other.DistanceToCenter)) return false;
      if (HitTheBoard != other.HitTheBoard) return false;
      if (Multiplicator != other.Multiplicator) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (PointSlot != other.PointSlot) return false;
      if (Points != other.Points) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XCoord != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XCoord);
      if (YCoord != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YCoord);
      if (DistanceToCenter != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DistanceToCenter);
      if (HitTheBoard != false) hash ^= HitTheBoard.GetHashCode();
      if (Multiplicator != 0) hash ^= Multiplicator.GetHashCode();
      if (Angle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Angle);
      if (PointSlot != 0) hash ^= PointSlot.GetHashCode();
      if (Points != 0) hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XCoord != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(XCoord);
      }
      if (YCoord != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(YCoord);
      }
      if (DistanceToCenter != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(DistanceToCenter);
      }
      if (HitTheBoard != false) {
        output.WriteRawTag(32);
        output.WriteBool(HitTheBoard);
      }
      if (Multiplicator != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Multiplicator);
      }
      if (Angle != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Angle);
      }
      if (PointSlot != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PointSlot);
      }
      if (Points != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Points);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XCoord != 0D) {
        size += 1 + 8;
      }
      if (YCoord != 0D) {
        size += 1 + 8;
      }
      if (DistanceToCenter != 0D) {
        size += 1 + 8;
      }
      if (HitTheBoard != false) {
        size += 1 + 1;
      }
      if (Multiplicator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiplicator);
      }
      if (Angle != 0D) {
        size += 1 + 8;
      }
      if (PointSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointSlot);
      }
      if (Points != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrowReply other) {
      if (other == null) {
        return;
      }
      if (other.XCoord != 0D) {
        XCoord = other.XCoord;
      }
      if (other.YCoord != 0D) {
        YCoord = other.YCoord;
      }
      if (other.DistanceToCenter != 0D) {
        DistanceToCenter = other.DistanceToCenter;
      }
      if (other.HitTheBoard != false) {
        HitTheBoard = other.HitTheBoard;
      }
      if (other.Multiplicator != 0) {
        Multiplicator = other.Multiplicator;
      }
      if (other.Angle != 0D) {
        Angle = other.Angle;
      }
      if (other.PointSlot != 0) {
        PointSlot = other.PointSlot;
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            XCoord = input.ReadDouble();
            break;
          }
          case 17: {
            YCoord = input.ReadDouble();
            break;
          }
          case 25: {
            DistanceToCenter = input.ReadDouble();
            break;
          }
          case 32: {
            HitTheBoard = input.ReadBool();
            break;
          }
          case 40: {
            Multiplicator = input.ReadInt32();
            break;
          }
          case 49: {
            Angle = input.ReadDouble();
            break;
          }
          case 56: {
            PointSlot = input.ReadInt32();
            break;
          }
          case 64: {
            Points = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
